// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("admins")
}

enum OrganizerType {
  INSTITUTE
  ORGANIZATION
  INDIVIDUAL
  COLLEGE
  SCHOOL
  OTHER
}

model Organizer {
  id          String                 @id @default(cuid())
  email       String                 @unique
  phone       String
  type        OrganizerType          @default(OTHER) @map("type")
  subdomain   String                 @unique @map("subdomain")
  createdAt   DateTime               @default(now()) @map("created_at")
  updatedAt   DateTime               @updatedAt @map("updated_at")
  teamMembers TeamMember[]
  events      Event[]
  invitations TeamMemberInvitation[]
  domains     OrganizerDomain[]
  name        String                 @map("name")
  logo        String?                @map("logo")

  @@map("organizers")
}

model TeamMember {
  id             String           @id @default(cuid())
  name           String?
  email          String?          @unique
  password       String?
  firstName      String?          @map("first_name")
  lastName       String?          @map("last_name")
  role           String?
  createdAt      DateTime         @default(now()) @map("created_at")
  organizerId    String           @map("organizer_id")
  organizer      Organizer        @relation(fields: [organizerId], references: [id])
  updatedAt      DateTime         @updatedAt @map("updated_at")
  ParticipantBan ParticipantBan[]

  verifiedAt  DateTime?     @map("verified_at")
  Participant Participant[]

  @@map("team_members")
}

model VerificationToken {
  id        String   @id @default(cuid())
  email     String   @unique
  token     String
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("verification_tokens")
}

model TeamMemberInvitation {
  id          String @id @default(cuid())
  name        String
  email       String @unique
  organizerId String @map("organizer_id")

  organizer Organizer @relation(fields: [organizerId], references: [id])

  @@index([organizerId, email])
  @@map("team_member_invitations")
}

model OrganizerDomain {
  id          String    @id @default(cuid())
  domain      String    @unique
  organizerId String    @map("organizer_id")
  organizer   Organizer @relation(fields: [organizerId], references: [id])

  @@map("organizer_domains")
}

model User {
  id                 String        @id @default(uuid())
  email              String        @unique
  password           String
  firstName          String
  lastName           String
  phone              String?
  isVerified         Boolean       @default(false)
  verificationToken  String?
  resetPasswordToken String?
  createdAt          DateTime      @default(now()) @map("created_at")
  updatedAt          DateTime      @updatedAt @map("updated_at")
  userEvents         UserEvent[]
  certificates       Certificate[]
  payments           Payment[]
  participants       Participant[]

  @@map("users")
}

enum EventType {
  ONLINE
  IN_PERSON
}

enum EventStatus {
  DRAFT
  PUBLISHED
  ENDED
}

model Event {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  startDate   DateTime @map("start_date")
  endDate     DateTime @map("end_date")

  banner String?     @map("banner")
  status EventStatus @default(DRAFT)

  // Event type
  type EventType @default(IN_PERSON)

  // Online event details
  link     String? @map("link")
  password String? @map("password")

  // Physical location details
  address   String? @map("address")
  city      String? @map("city")
  state     String? @map("state")
  country   String? @map("country")
  pincode   String? @map("pincode")
  latitude  Float?  @map("latitude")
  longitude Float?  @map("longitude")

  // Relations
  speakers  EventSpeaker[]
  schedules EventSchedule[]
  faqs      FAQ[]
  settings  EventSettings?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  organizerId String    @map("organizer_id")
  organizer   Organizer @relation(fields: [organizerId], references: [id])

  handle String @unique @map("handle")

  certificates Certificate[]

  isPaid     Boolean        @default(false) @map("is_paid")
  isFeatured Boolean        @default(false) @map("is_featured")
  cost       Float          @default(0) @map("cost")
  userEvents UserEvent[]
  webhooks   EventWebhook[]
  payments   Payment[]

  completedAt   DateTime?      @map("completed_at")
  conversations Conversation[]

  @@map("events")
}

model EventSpeaker {
  id           String  @id @default(cuid())
  name         String
  designation  String
  organization String?
  avatar       String?
  type         String // Speaker or Judge
  eventId      String  @map("event_id")
  event        Event   @relation(fields: [eventId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("event_speakers")
}

model EventSchedule {
  id          String   @id @default(cuid())
  date        DateTime
  title       String
  description String?  @db.Text
  eventId     String   @map("event_id")
  event       Event    @relation(fields: [eventId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("event_schedules")
}

model FAQ {
  id       String @id @default(cuid())
  question String
  answer   String @db.Text
  eventId  String @map("event_id")
  event    Event  @relation(fields: [eventId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("faqs")
}

model EventSettings {
  id      String @id @default(cuid())
  eventId String @unique @map("event_id")
  event   Event  @relation(fields: [eventId], references: [id])

  registrationEnabled Boolean   @default(false) @map("registration_enabled")
  registrationEndDate DateTime? @map("registration_end_date")
  maxRegistrations    Int?      @map("max_registrations")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("event_settings")
}

enum ParticipantStatus {
  ACTIVE
  BANNED
  LEFT
}

model UserEvent {
  id      String @id @default(uuid())
  user    User   @relation(fields: [userId], references: [id])
  userId  String @map("user_id")
  event   Event  @relation(fields: [eventId], references: [id])
  eventId String @map("event_id")

  status ParticipantStatus @default(ACTIVE)
  qrCode String?           @map("qr_code")

  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")
  ban         ParticipantBan?
  payment     Payment?        @relation(fields: [paymentId], references: [id])
  paymentId   String?         @map("payment_id")
  certificate Certificate?

  @@index([userId])
  @@index([eventId])
  @@map("user_events")
}

model ParticipantBan {
  id          String     @id @default(cuid())
  userEventId String     @unique @map("user_event_id")
  userEvent   UserEvent  @relation(fields: [userEventId], references: [id])
  reason      String     @db.Text
  bannedAt    DateTime   @default(now()) @map("banned_at")
  bannedById  String     @map("banned_by_id") // TeamMember ID
  bannedBy    TeamMember @relation(fields: [bannedById], references: [id])

  @@map("participant_bans")
}

enum WebhookType {
  DISCORD
  SLACK
  CUSTOM
}

model EventWebhook {
  id        String      @id @default(cuid())
  eventId   String      @map("event_id")
  event     Event       @relation(fields: [eventId], references: [id])
  type      WebhookType
  url       String
  secret    String?
  isActive  Boolean     @default(true) @map("is_active")
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")

  @@map("event_webhooks")
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

model Payment {
  id            String        @id @default(uuid())
  eventId       String        @map("event_id")
  event         Event         @relation(fields: [eventId], references: [id])
  amount        Float
  userId        String        @map("user_id")
  user          User          @relation(fields: [userId], references: [id])
  paymentMethod String        @map("payment_method")
  paymentStatus PaymentStatus @map("payment_status")
  transactionId String?       @map("transaction_id")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  userEvents    UserEvent[]

  @@index([eventId])
  @@map("payments")
}

model Certificate {
  id          String    @id @default(uuid())
  eventId     String    @map("event_id")
  event       Event     @relation(fields: [eventId], references: [id])
  userId      String    @map("user_id")
  user        User      @relation(fields: [userId], references: [id])
  userEventId String    @unique @map("user_event_id")
  userEvent   UserEvent @relation(fields: [userEventId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([eventId, userId])
  @@map("certificates")
}

model ResetPasswordToken {
  id        String   @id @default(uuid())
  email     String   @unique
  token     String
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("reset_password_tokens")
}

model Conversation {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  eventId   String   @unique @map("event_id")
  event     Event    @relation(fields: [eventId], references: [id])

  participants Participant[]
  messages     Message[]

  @@map("conversations")
}

model Participant {
  id             String       @id @default(cuid())
  conversationId String       @map("conversation_id")
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  userId         String?      @map("user_id")
  user           User?        @relation(fields: [userId], references: [id])

  teamMemberId String?     @map("team_member_id")
  teamMember   TeamMember? @relation(fields: [teamMemberId], references: [id])
  messages     Message[]

  @@map("participants")
}

model Message {
  id             String        @id @default(cuid())
  content        String
  isAi           Boolean       @default(false) @map("is_ai")
  createdAt      DateTime      @default(now()) @map("created_at")
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
  conversationId String?
  senderId       String?       @map("sender_id")
  sender         Participant?  @relation(fields: [senderId], references: [id])

  @@map("messages")
}
